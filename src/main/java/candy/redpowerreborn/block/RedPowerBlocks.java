package candy.redpowerreborn.block;

import candy.redpowerreborn.RedPower;
import net.minecraft.block.Block;
import net.minecraft.block.material.Material;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.RenderItem;
import net.minecraft.client.renderer.block.model.ModelResourceLocation;
import net.minecraft.creativetab.CreativeTabs;
import net.minecraft.init.Blocks;
import net.minecraft.item.Item;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.fml.relauncher.Side;

public class RedPowerBlocks {
	public static Block ACCELERATOR;
	public static Block ALLOY_FURNACE;
	public static Block ASSEMBLER;
	public static Block BASALT;
	public static Block BASALT_BRICK;
	public static Block BASALT_BRICK_CHISELED;
	public static Block BASALT_COBBLESTONE;
	public static Block BASALT_PAVER;
	public static Block BATTERY_BOX;
	public static Block BLOCK_BREAKER;
	public static Block BLULECTRIC_ALLOY_FURNACE;
	public static Block BLULECTRIC_FURNACE;
	public static Block BUFFER;
	public static Block CHARGING_BENCH;
	public static Block COPPER_BLOCK;
	public static Block COPPER_ORE;
	public static Block DEPLOYER;
	public static Block EJECTOR;
	public static Block EMERALD_BLOCK;
	public static Block EMERALD_ORE;
	public static Block FILTER;
	public static Block FLAX;
	public static Block FLUID_PIPE;
	public static Block FRAME_MOTOR;
	public static Block GRATE;
	public static Block IGNITER;
	public static Block INDIGO_FLOWER;
	public static Block ITEM_DETECTOR;
	public static Block KINETIC_GENERATOR;
	public static Block MAGTUBE;
	public static Block MANAGER;
	public static Block MARBLE;
	public static Block MARBLE_BRICK;
	public static Block NIKOLITE_ORE;
	public static Block PNEUMATIC_TUBE;
	public static Block PROJECT_TABLE;
	public static Block PUMP;
	public static Block REDSTONE_TUBE;
	public static Block REGULATOR;
	public static Block RELAY;
	public static Block RESTRICTION_TUBE;
	public static Block RETRIEVER;
	public static Block RUBBER_LEAVES;
	public static Block RUBBER_SAPLING;
	public static Block RUBBER_LOG;
	public static Block RUBY_BLOCK;
	public static Block RUBY_ORE;
	public static Block SAPPHIRE_BLOCK;
	public static Block SAPPHIRE_ORE;
	public static Block SILVER_BLOCK;
	public static Block SILVER_ORE;
	public static Block SOLAR_PANEL;
	public static Block SORTING_MACHINE;
	public static Block SORTRON;
	public static Block SUPPORT_FRAME;
	public static Block THERMOPILE;
	public static Block TIN_BLOCK;
	public static Block TIN_ORE;
	public static Block TRANSPOSER;
	public static Block TUNGSTEN_ORE;

	public static void preInit(FMLPreInitializationEvent event) {
		//TODO give all blocks proper hardness values and effectives tools, and generation if applicable
		ACCELERATOR = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_accelerator").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(ACCELERATOR, "accelerator");
		ALLOY_FURNACE = new BlockAlloyFurnace().setUnlocalizedName(RedPower.MODID + "_alloyFurnace").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(ALLOY_FURNACE, "alloy_furnace");
		ASSEMBLER = new BlockAssembler().setUnlocalizedName(RedPower.MODID + "_assembler").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(ASSEMBLER, "assembler");
		BASALT = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_basalt").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BASALT, "basalt");
		BASALT_BRICK = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_basalt.brick").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BASALT_BRICK, "basalt_brick");
		BASALT_BRICK_CHISELED = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_basalt.chiseled").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BASALT_BRICK_CHISELED, "basalt_brick_chiseled");
		BASALT_COBBLESTONE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_basalt.cobblestone").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BASALT_COBBLESTONE, "basalt_cobblestone");
		BASALT_PAVER = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_basalt.paver").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BASALT_PAVER, "basalt_paver");
		BATTERY_BOX = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_batteryBox").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BATTERY_BOX, "battery_box");
		BLOCK_BREAKER = new BlockBlockBreaker().setUnlocalizedName(RedPower.MODID + "_blockBreaker").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BLOCK_BREAKER, "block_breaker");
		BLULECTRIC_ALLOY_FURNACE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_blulectricAlloyFurnace").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BLULECTRIC_ALLOY_FURNACE, "blulectric_alloy_furnace");
		BLULECTRIC_FURNACE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_blulectricFurnace").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BLULECTRIC_FURNACE, "blulectric_furnace");
		BUFFER = new BlockBuffer().setUnlocalizedName(RedPower.MODID + "_buffer").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(BUFFER, "buffer");
		CHARGING_BENCH = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_chargingBench").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(CHARGING_BENCH, "charging_bench");
		COPPER_BLOCK = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_blockCopper").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(COPPER_BLOCK, "copper_block");
		COPPER_ORE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_oreCopper").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(COPPER_ORE, "copper_ore");
		DEPLOYER = new BlockDeployer().setUnlocalizedName(RedPower.MODID + "_deployer").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(DEPLOYER, "deployer");
		EJECTOR = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_ejector").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(EJECTOR, "ejector");
		EMERALD_BLOCK = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_blockEmerald").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(EMERALD_BLOCK, "emerald_block");
		EMERALD_ORE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_oreEmerald").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(EMERALD_ORE, "emerald_ore");
		FILTER = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_filter").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(FILTER, "filter");
		FLAX = new BlockFlax().setUnlocalizedName(RedPower.MODID + "_flax");
		GameRegistry.registerBlock(FLAX, "flax");
		FLUID_PIPE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_fluidPipe").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(FLUID_PIPE, "fluid_pipe");
		FRAME_MOTOR = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_frameMotor").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(FRAME_MOTOR, "frame_motor");
		GRATE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_grate").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(GRATE, "grate");
		IGNITER = new BlockIgniter().setUnlocalizedName(RedPower.MODID + "_igniter").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(IGNITER, "igniter");
		INDIGO_FLOWER = new BlockIndigoFlower().setUnlocalizedName(RedPower.MODID + "_flower.indigo").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(INDIGO_FLOWER, "indigo_flower");
		ITEM_DETECTOR = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_itemDetector").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(ITEM_DETECTOR, "item_detector");
		KINETIC_GENERATOR = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_kineticGenerator").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(KINETIC_GENERATOR, "kinetic_generator");
		MAGTUBE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_magtube").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(MAGTUBE, "magtube");
		MANAGER = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_manager").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(MANAGER, "manager");
		MARBLE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_marble").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(MARBLE, "marble");
		MARBLE_BRICK = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_marble.brick").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(MARBLE_BRICK, "marble_brick");
		NIKOLITE_ORE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_oreNickolite").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(NIKOLITE_ORE, "nickolite_ore");
		PNEUMATIC_TUBE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_pnuematicTube").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(PNEUMATIC_TUBE, "pnuematic_tube");
		PROJECT_TABLE = new BlockProjectTable().setUnlocalizedName(RedPower.MODID + "_projectTable").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(PROJECT_TABLE, "project_table");
		PUMP = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_pump").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(PUMP, "pump");
		REDSTONE_TUBE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_redstoneTube").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(REDSTONE_TUBE, "redstone_tube");
		REGULATOR = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_regulator").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(REGULATOR, "regulator");
		RELAY = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_relay").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(RELAY, "relay");
		RESTRICTION_TUBE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_restrictionTube").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(RESTRICTION_TUBE, "restriction_tube");
		RETRIEVER = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_retriever").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(RETRIEVER, "retriever");
		RUBBER_LEAVES = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_leaves.rubber").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(RUBBER_LEAVES, "rubber_leaves");
		RUBBER_SAPLING = new Block(Material.AIR).setUnlocalizedName(RedPower.MODID + "_sapling.rubber").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(RUBBER_SAPLING, "rubber_sapling");
		RUBBER_LOG = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_log.rubber").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(RUBBER_LOG, "rubber_log");
		RUBY_BLOCK = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_blockRuby").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(RUBY_BLOCK, "ruby_block");
		RUBY_ORE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_oreRuby").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(RUBY_ORE, "ruby_ore");
		SAPPHIRE_BLOCK = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_blockSapphire").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(SAPPHIRE_BLOCK, "sapphire_block");
		SAPPHIRE_ORE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_oreSapphire").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(SAPPHIRE_ORE, "sapphire_ore");
		SILVER_BLOCK = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_blockSilver").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(SILVER_BLOCK, "silver_block");
		SILVER_ORE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_oreSilver").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(SILVER_ORE, "silver_ore");
		SOLAR_PANEL = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_solarPanel").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(SOLAR_PANEL, "solar_panel");
		SORTING_MACHINE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_sortingMachine").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(SORTING_MACHINE, "sorting_machine");
		SORTRON = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_sortron").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(SORTRON, "sortron");
		SUPPORT_FRAME = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_supportFrame").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(SUPPORT_FRAME, "support_frame");
		THERMOPILE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_thermopile").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(THERMOPILE, "thermopile");
		TIN_BLOCK = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_blockTin").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(TIN_BLOCK, "tin_block");
		TIN_ORE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_oreTin").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(TIN_ORE, "tin_ore");
		TRANSPOSER = new BlockTransposer().setUnlocalizedName(RedPower.MODID + "_transposer").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(TRANSPOSER, "transposer");
		TUNGSTEN_ORE = new Block(Material.ROCK).setUnlocalizedName(RedPower.MODID + "_oreTungsten").setCreativeTab(RedPower.tabRedPower);
		GameRegistry.registerBlock(TUNGSTEN_ORE, "tungsten_ore");
	}
	
	public static void init(FMLInitializationEvent event) {
		if (event.getSide() == Side.CLIENT) {
			RenderItem renderItem = Minecraft.getMinecraft().getRenderItem();
			
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(ACCELERATOR), 0, new ModelResourceLocation(RedPower.MODID + ":accelerator", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(ALLOY_FURNACE), 0, new ModelResourceLocation(RedPower.MODID + ":alloy_furnace", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(ASSEMBLER), 0, new ModelResourceLocation(RedPower.MODID + ":assembler", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BASALT), 0, new ModelResourceLocation(RedPower.MODID + ":basalt", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BASALT_BRICK), 0, new ModelResourceLocation(RedPower.MODID + ":basalt_brick", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BASALT_BRICK_CHISELED), 0, new ModelResourceLocation(RedPower.MODID + ":basalt_brick_chiseled", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BASALT_COBBLESTONE), 0, new ModelResourceLocation(RedPower.MODID + ":basalt_cobblestone", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BASALT_PAVER), 0, new ModelResourceLocation(RedPower.MODID + ":basalt_paver", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BATTERY_BOX), 0, new ModelResourceLocation(RedPower.MODID + ":battery_box", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BLOCK_BREAKER), 0, new ModelResourceLocation(RedPower.MODID + ":block_breaker", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BLULECTRIC_ALLOY_FURNACE), 0, new ModelResourceLocation(RedPower.MODID + ":blulectric_alloy_furnace", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BLULECTRIC_FURNACE), 0, new ModelResourceLocation(RedPower.MODID + ":blulectric_furnace", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(BUFFER), 0, new ModelResourceLocation(RedPower.MODID + ":buffer", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(CHARGING_BENCH), 0, new ModelResourceLocation(RedPower.MODID + ":charging_bench", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(COPPER_BLOCK), 0, new ModelResourceLocation(RedPower.MODID + ":copper_block", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(COPPER_ORE), 0, new ModelResourceLocation(RedPower.MODID + ":copper_ore", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(DEPLOYER), 0, new ModelResourceLocation(RedPower.MODID + ":deployer", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(EJECTOR), 0, new ModelResourceLocation(RedPower.MODID + ":ejector", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(EMERALD_BLOCK), 0, new ModelResourceLocation(RedPower.MODID + ":emerald_block", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(EMERALD_ORE), 0, new ModelResourceLocation(RedPower.MODID + ":emerald_ore", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(FILTER), 0, new ModelResourceLocation(RedPower.MODID + ":filter", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(FLAX), 0, new ModelResourceLocation(RedPower.MODID + ":flax", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(FLUID_PIPE), 0, new ModelResourceLocation(RedPower.MODID + ":fluid_pipe", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(FRAME_MOTOR), 0, new ModelResourceLocation(RedPower.MODID + ":frame_motor", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(GRATE), 0, new ModelResourceLocation(RedPower.MODID + ":grate", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(IGNITER), 0, new ModelResourceLocation(RedPower.MODID + ":igniter", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(INDIGO_FLOWER), 0, new ModelResourceLocation(RedPower.MODID + ":indigo_flower", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(ITEM_DETECTOR), 0, new ModelResourceLocation(RedPower.MODID + ":block_detector", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(KINETIC_GENERATOR), 0, new ModelResourceLocation(RedPower.MODID + ":kinetic_generator", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(MAGTUBE), 0, new ModelResourceLocation(RedPower.MODID + ":magtube", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(MANAGER), 0, new ModelResourceLocation(RedPower.MODID + ":mannager", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(MARBLE), 0, new ModelResourceLocation(RedPower.MODID + ":marble", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(MARBLE_BRICK), 0, new ModelResourceLocation(RedPower.MODID + ":marble_brick", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(NIKOLITE_ORE), 0, new ModelResourceLocation(RedPower.MODID + ":nickolite_ore", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(PNEUMATIC_TUBE), 0, new ModelResourceLocation(RedPower.MODID + ":pnuematic_tube", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(PROJECT_TABLE), 0, new ModelResourceLocation(RedPower.MODID + ":project_table", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(PUMP), 0, new ModelResourceLocation(RedPower.MODID + ":pump", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(REDSTONE_TUBE), 0, new ModelResourceLocation(RedPower.MODID + ":redstone_tube", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(REGULATOR), 0, new ModelResourceLocation(RedPower.MODID + ":regulator", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(RELAY), 0, new ModelResourceLocation(RedPower.MODID + ":relay", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(RESTRICTION_TUBE), 0, new ModelResourceLocation(RedPower.MODID + ":restriction_tube", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(RETRIEVER), 0, new ModelResourceLocation(RedPower.MODID + ":retriever", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(RUBBER_LEAVES), 0, new ModelResourceLocation(RedPower.MODID + ":rubber_leaves", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(RUBBER_LOG), 0, new ModelResourceLocation(RedPower.MODID + ":rubber_wood", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(RUBY_BLOCK), 0, new ModelResourceLocation(RedPower.MODID + ":ruby_block", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(RUBY_ORE), 0, new ModelResourceLocation(RedPower.MODID + ":ruby_ore", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(SAPPHIRE_BLOCK), 0, new ModelResourceLocation(RedPower.MODID + ":sapphire_block", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(SAPPHIRE_ORE), 0, new ModelResourceLocation(RedPower.MODID + ":sapphire_ore", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(SILVER_BLOCK), 0, new ModelResourceLocation(RedPower.MODID + ":silver_block", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(SILVER_ORE), 0, new ModelResourceLocation(RedPower.MODID + ":silver_ore", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(SOLAR_PANEL), 0, new ModelResourceLocation(RedPower.MODID + ":solar_panel", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(SORTING_MACHINE), 0, new ModelResourceLocation(RedPower.MODID + ":sorting_machine", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(SORTRON), 0, new ModelResourceLocation(RedPower.MODID + ":sortron", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(SUPPORT_FRAME), 0, new ModelResourceLocation(RedPower.MODID + ":support_frame", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(THERMOPILE), 0, new ModelResourceLocation(RedPower.MODID + ":thermopile", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(TIN_BLOCK), 0, new ModelResourceLocation(RedPower.MODID + ":tin_block", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(TIN_ORE), 0, new ModelResourceLocation(RedPower.MODID + ":tin_ore", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(TRANSPOSER), 0, new ModelResourceLocation(RedPower.MODID + ":transposer", "inventory"));
			renderItem.getItemModelMesher().register(Item.getItemFromBlock(TUNGSTEN_ORE), 0, new ModelResourceLocation(RedPower.MODID + ":tungsten_ore", "inventory"));
		}
	}
}